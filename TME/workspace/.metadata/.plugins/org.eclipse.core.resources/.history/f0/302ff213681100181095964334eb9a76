package algorithms;

import java.awt.Point;
import java.util.ArrayList;

public class DefaultTeam {

	public int[][] calculShortestPaths(ArrayList<Point> points, int edgeThreshold) {
		/* La variable n est initialisé à la taille de la liste des points */
		int n = points.size();
		/* La liste paths contient l'indice du point le plus proche sur le plus court chemin*/
		int[][] paths=new int[n][n];
		/* La matrice distances contient les distances */
		double[][] distances = new double[n][n];;
		
		/* 
		 * On initialise les distances entre deux points avec la condition suivante
		 *  - Si la distance entre deux points plus grand que le seuil, il est considéré comme infini
		 *  - Sinon on initialise la case correspondant avec la distance correspondant
		 * */
		for (int i = 0; i < n; i++){
			for (int j = 0; j < n; j++){
				distances[i][j] = points.get(i).distance(points.get(j));
				if (distances[i][j] > edgeThreshold){
					distances[i][j] = Double.POSITIVE_INFINITY;
				}
			}
		}

		/* On initialise la matrice des plus court chemins avec l'index du point d'arrivée */
		for (int i=0;i<n;i++){
			for (int j=0;j<n;j++){ 
				paths[i][j]=j;
				}
		}
		
		/*
		 * Pour déterminer si il y a un point k entre les points i et j (sur le chemin) dont la distance entre i et k et plus petit que la distance i et j,
		 * on va utiliser 3 boucles imbriqués (comme on va tester les 3 distances entre 3 points)
		 * */
		for (int k = 0; k< n;k++)
		{
			System.out.println("k: " + k);
			for (int i = 0; i< n; i++)
			{
				for (int j=0 ;j<n;j++)
				{
					if (distances[i][j] > (distances[i][k] + distances[k][j]))
					{
						paths[i][j] = paths[i][k];
						distances[i][j] = distances[i][k] + distances[k][j];
						
					}
				}
			}
		}

		return paths;
	}
	
	
}
