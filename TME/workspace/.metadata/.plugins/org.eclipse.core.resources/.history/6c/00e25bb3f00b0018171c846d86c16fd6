package algorithms;
import java.awt.Point;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.Collections;



public class Exercice2 {
	/* L'attribut ensembleDepart contient les points dans l'ensemble de départ */
	private ArrayList<Point> ensembleDepart;
	private ArrayList<Arc> listeSolution;
	/* 
	 * Permet d'initialiser la liste des points de depart depuis le fichier input.points donné dans le TME
	 * Retourne le nombre des points crées. 
	*/
	private int initaliseFromInputFile() {
		int cpt = 0;
		this.ensembleDepart = new ArrayList<Point>();
		try (BufferedReader br = new BufferedReader(new FileReader("input.points"))) {
			String sCurrentLine;
			while ((sCurrentLine = br.readLine()) != null) {
				String[] lineTable = sCurrentLine.split(" ");
				Point p = new Point(Integer.parseInt(lineTable[0]),Integer.parseInt(lineTable[1]));
				this.ensembleDepart.add(p);
				cpt++;
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
		return cpt;
	}
	
	/* Retourne true si l'ajout de l'arc crée une cycle */
	private boolean isCreateCycle(Arc a)
	{
		
	}
	
	/* La méthode retourne la l'ensemble de toutes les paire constitués de deux points de l'ensemble des points de départ */
	private ArrayList<Arc> aretesCandidates() {
		/* On contrôle d'abord si l'ensemble de départ est bien initialisé*/
		if ((this.ensembleDepart == null) || (this.ensembleDepart.size() == 0)) {
			/* Si ce n'est pas le cas on l'initialise */
			this.initaliseFromInputFile();
		}
		/* La liste des points res est la liste qu'on va retourner à la fin de cette méthode */
		ArrayList<Arc> res = new ArrayList<Arc>();
		/* On parcourt deux fois la liste des points de départ pour obtenir tous les paires des points. On va eviter les doublons de type (P1,P2) et (P2,P1) où P1 et P2 sont des ensemble des points départ*/
		for (int i = 0; i< this.ensembleDepart.size();i++)
		{
			for (int j=i+1;j<this.ensembleDepart.size();j++){
				res.add(new Arc(this.ensembleDepart.get(i), this.ensembleDepart.get(j)));
			}
		}
		return res;
	}
	
	private void trierAretesCandidates() {
		this.aretesCandidates().sort((o1,o2) -> ((o1.poid()-o2.poid())<0)?-1:((o1.poid()-o2.poid())==0)?0:1);
	}
	
	public Exercice2() {
		this.listeSolution = new ArrayList<Arc>();
	}
}
