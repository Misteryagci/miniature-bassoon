package algorithms;

import java.awt.Point;
import java.util.ArrayList;
import java.util.function.Function;

import algorithms.Tree2D;

public class DefaultTeam {

	double[][] distances;

	
	public int[][] calculShortestPaths(ArrayList<Point> points, int edgeThreshold) {
		/* La variable n est initialisé à la taille de la liste des points */
		int n = points.size();
		/* La liste paths contient l'indice du point le plus proche sur le plus court chemin*/
		int[][] paths=new int[n][n];
		/* La matrice distances contient les distances */
		this.distances = new double[n][n];

		/* 
		 * On initialise les distances entre deux points avec la condition suivante
		 *  - Si la distance entre deux points plus grand que le seuil, il est considéré comme infini
		 *  - Sinon on initialise la case correspondant avec la distance correspondant
		 * */
		for (int i = 0; i < n; i++){
			for (int j = 0; j < n; j++){
				this.distances[i][j] = points.get(i).distance(points.get(j));
				if (this.distances[i][j] > edgeThreshold){
					this.distances[i][j] = Double.POSITIVE_INFINITY;
				}
			}
		}

		/* On initialise la matrice des plus court chemins avec l'index du point d'arrivée */
		for (int i=0;i<n;i++){
			for (int j=0;j<n;j++){ 
				paths[i][j]=j;
			}
		}

		/*
		 * Pour déterminer si il y a un point k entre les points i et j (sur le chemin) dont la distance entre i et k et plus petit que la distance i et j,
		 * on va utiliser 3 boucles imbriqués (comme on va tester les 3 distances entre 3 points)
		 * */
		for (int k = 0; k< n;k++)
		{
			System.out.println("k: " + k);
			for (int i = 0; i< n; i++)
			{
				for (int j=0 ;j<n;j++)
				{
					/* 
					 * Soient i,j,k trois indices des points
					 * On va tester si la distance entre i et j et plus grand que la somme des distances des points i et k et des points k et j
					 * */
					if (distances[i][j] > (distances[i][k] + distances[k][j]))
					{
						/* Si c'est le cas c'est à dire qu'il existe un point k entre les points i et j, qui est plus proche à i.*/
						paths[i][j] = paths[i][k]; /* Donc on change l'indice du point le plus proche sur le chemin i,j avec l'indice i,k*/
						distances[i][j] = distances[i][k] + distances[k][j]; /* On change ainsi la distance entre des points i et j avec la somme des distances i,k et k,j*/
					}
				}
			}
		}

		return paths;
	}

	public Tree2D calculSteiner(ArrayList<Point> points, int edgeThreshold, ArrayList<Point> hitPoints) {
		final int[][] plusCourtChemins = this.calculShortestPaths(points, edgeThreshold);
		
		
		/* hn la taille de la liste hitPoints */
		int hn = hitPoints.size();
		
		double[][] OS = new double[hn][hn];
		for (int i = 0; i<hn;i++)
		{
			for (int j= 0;j<hn;j++)
			{
				int pi = points.indexOf(hitPoints.get(i));
				int pj = points.indexOf(hitPoints.get(j));
				OS[i][j] = this.distances[pi][pj];
			}
		}
		
		
		//REMOVE >>>>>
		Tree2D leafX = new Tree2D(new Point(700,400),new ArrayList<Tree2D>());
		Tree2D leafY = new Tree2D(new Point(700,500),new ArrayList<Tree2D>());
		Tree2D leafZ = new Tree2D(new Point(800,450),new ArrayList<Tree2D>());
		ArrayList<Tree2D> subTrees = new ArrayList<Tree2D>();
		subTrees.add(leafX);
		subTrees.add(leafY);
		subTrees.add(leafZ);
		Tree2D steinerTree = new Tree2D(new Point(750,450),subTrees);
		//<<<<< REMOVE

		return steinerTree;
	}
	
	 private Tree2D kruskal(ArrayList<Point> points) {
		    //KRUSKAL ALGORITHM, NOT OPTIMAL FOR STEINER!
		    ArrayList<Edge> edges = new ArrayList<Edge>();
		    for (Point p: points) {
		      for (Point q: points) {
		        if (p.equals(q) || contains(edges,p,q)) continue;
		        edges.add(new Edge(p,q));
		      }
		    }
		    edges = sort(edges);

		    ArrayList<Edge> kruskal = new ArrayList<Edge>();
		    Edge current;
		    NameTag forest = new NameTag(points);
		    while (edges.size()!=0) {
		      current = edges.remove(0);
		      if (forest.tag(current.p)!=forest.tag(current.q)) {
		        kruskal.add(current);
		        forest.reTag(forest.tag(current.p),forest.tag(current.q));
		      }
		    }

		    return edgesToTree(kruskal,kruskal.get(0).p);
		  }
		  private boolean contains(ArrayList<Edge> edges,Point p,Point q){
		    for (Edge e:edges){
		      if (e.p.equals(p) && e.q.equals(q) ||
		          e.p.equals(q) && e.q.equals(p) ) return true;
		    }
		    return false;
		  }
		  private Tree2D edgesToTree(ArrayList<Edge> edges, Point root) {
		    ArrayList<Edge> remainder = new ArrayList<Edge>();
		    ArrayList<Point> subTreeRoots = new ArrayList<Point>();
		    Edge current;
		    while (edges.size()!=0) {
		      current = edges.remove(0);
		      if (current.p.equals(root)) {
		        subTreeRoots.add(current.q);
		      } else {
		        if (current.q.equals(root)) {
		          subTreeRoots.add(current.p);
		        } else {
		          remainder.add(current);
		        }
		      }
		    }

		    ArrayList<Tree2D> subTrees = new ArrayList<Tree2D>();
		    for (Point subTreeRoot: subTreeRoots) subTrees.add(edgesToTree((ArrayList<Edge>)remainder.clone(),subTreeRoot));

		    return new Tree2D(root, subTrees);
		  }
		  private ArrayList<Edge> sort(ArrayList<Edge> edges) {
		    if (edges.size()==1) return edges;

		    ArrayList<Edge> left = new ArrayList<Edge>();
		    ArrayList<Edge> right = new ArrayList<Edge>();
		    int n=edges.size();
		    for (int i=0;i<n/2;i++) { left.add(edges.remove(0)); }
		    while (edges.size()!=0) { right.add(edges.remove(0)); }
		    left = sort(left);
		    right = sort(right);

		    ArrayList<Edge> result = new ArrayList<Edge>();
		    while (left.size()!=0 || right.size()!=0) {
		      if (left.size()==0) { result.add(right.remove(0)); continue; }
		      if (right.size()==0) { result.add(left.remove(0)); continue; }
		      if (left.get(0).distance() < right.get(0).distance()) result.add(left.remove(0));
		      else result.add(right.remove(0));
		    }
		    return result;
		  }
		}
		class Edge {
		  protected Point p,q;
		  protected Edge(Point p,Point q){ this.p=p; this.q=q; }
		  protected double distance(){ return p.distance(q); }
		}
		class NameTag {
		  private ArrayList<Point> points;
		  private int[] tag;
		  protected NameTag(ArrayList<Point> points){
		    this.points=(ArrayList<Point>)points.clone();
		    tag=new int[points.size()];
		    for (int i=0;i<points.size();i++) tag[i]=i;
		  }
		  protected void reTag(int j, int k){
		    for (int i=0;i<tag.length;i++) if (tag[i]==j) tag[i]=k;
		  }
		  protected int tag(Point p){
		    for (int i=0;i<points.size();i++) if (p.equals(points.get(i))) return tag[i];
		    return 0xBADC0DE;
		  }
	
	
	
}
