package algorithms;

import java.awt.Point;
import java.util.ArrayList;

public class DefaultTeam {

	public int[][] calculShortestPaths(ArrayList<Point> points, int edgeThreshold) {
		int[][] paths=new int[points.size()][points.size()];
		double[][] distances = new double[points.size()][points.size()];;
		System.out.println("test 2");

		for (int i = 0; i < points.size(); i++){
			for (int j = 0; j < points.size(); j++){
				distances[i][j] = points.get(i).distance(points.get(j));
				if (distances[i][j] > edgeThreshold){
					distances[i][j] = Double.POSITIVE_INFINITY;
				}
			}
		}

		for (int i=0;i<paths.length;i++){
			for (int j=0;j<paths.length;j++){ 
				paths[i][j]=j;
				}
		}
		
		int n = points.size();
		
		for (int k = 0; k< n;k++)
		{
			System.out.println("k: " + k);
			for (int i = 0; i< n; i++)
			{
				for (int j=0 ;j<n;j++)
				{
					if (distances[i][j] > (distances[i][k] + distances[k][j]))
					{
						paths[i][j] = paths[i][k];
						distances[i][j] = distances[i][k] + distances[k][j];
						
					}
				}
			}
		}

		return paths;
	}
	
	
}
